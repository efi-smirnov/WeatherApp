# Checkout Code: This step retrieves the latest code from your repository.
# Prepare Environment: Installs necessary tools (Python, pip, and the AWS Elastic Beanstalk CLI).
# Installing poetry dependencies
# Caching 
# Configure AWS Credentials: Sets up AWS credentials from GitHub secrets to interact with AWS services.
# Login to Amazon ECR: Authenticates with Amazon Elastic Container Registry.
# Build and Tag Docker Image: Builds the Docker image for your application.
# Deploy to Elastic Beanstalk Environment: Initializes and deploys your application to the specified Elastic Beanstalk environment.
# Get Elastic Beanstalk Environment URL: Retrieves the URL of the deployed environment.
# Set Environment URL: Outputs the deployed environment URL if the previous steps were successful.
name: Build and Deploy Streamlit Dynamic Application

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: "eu-west-2"
      APP_NAME: "WeatherApp"
      CONTAINER_PORT: 8501

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract JIRA Ticket ID
        id: setup-jira-id
        run: |
          branch_name=$(echo ${{ github.ref_name }} | sed 's/refs\/heads\///')
          jira_ticket_id=$(echo "$branch_name" | grep -oE 'WEAT-[0-9]+' | head -n 1)
          if [ -z "$jira_ticket_id" ]; then
            echo "No JIRA ID found in branch name. Exiting."
            exit 1
          fi
          echo "JIRA_TICKET_ID=$jira_ticket_id" >> $GITHUB_ENV

      - name: Install dependencies with Poetry
        run: |
          poetry install --no-interaction --no-root

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.local/share/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker_tag=$(echo ${{ env.JIRA_TICKET_ID }} | tr '[:upper:]' '[:lower:]')
          docker build -t ${{ secrets.DOCKER_USERNAME }}/weather-app:$docker_tag .
          docker push ${{ secrets.DOCKER_USERNAME }}/weather-app:$docker_tag

      - name: Generate Dockerrun.aws.json file
        run: ./.github/scripts/generate-dockerrun-aws-json.sh ${{ env.JIRA_TICKET_ID }} ${{ secrets.DOCKER_USERNAME }} ${{ env.CONTAINER_PORT }}

      - name: Create or Update Elastic Beanstalk Environment
        run: ./.github/scripts/create-or-update-environment.sh ${{ env.APP_NAME }} ${{ env.JIRA_TICKET_ID }} ${{ env.AWS_REGION }}

      - name: Set Environment URL
        if: success()
        run: |
          echo "Deployed URL: ${{ env.deployed_url }}"
